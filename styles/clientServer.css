/* inline styling 1 version */

.cls-1 {
  stroke: #000;
}

.cls-1, .cls-2, .cls-3, .cls-4, .cls-5, .cls-6 {
  stroke-miterlimit: 10;
}

.cls-1, .cls-3, .cls-7, .cls-4, .cls-8, .cls-6 {
  fill: none;
}

.cls-1, .cls-9 {
  opacity: .55;
}

.cls-10 {
  fill: url(#Unbenannter_Verlauf_11-3);
}

.cls-11 {
  fill: url(#Unbenannter_Verlauf_11-2);
}

.cls-12 {
  fill: #435bf8;
  filter: url(#outer-glow-1);
}

.cls-13 {
  filter: url(#outer-glow-4);
}

.cls-13, .cls-14, .cls-15, .cls-5 {
  fill: #ffb921;
}

.cls-14 {
  filter: url(#outer-glow-2);
}

/* .cls-2 {
  opacity: .25;
  stroke: #8a8b96;
} */

.cls-2, .cls-5 {
  stroke-width: 1.5px;
}

.cls-16 {
  fill: #ededf0;
}

.cls-17 {
  fill: #fdfdfd;
}

.cls-18 {
  fill: #ff91c9;
}

.cls-19 {
  fill: #666771;
}

.cls-20 {
  fill: #dcdde5;
}

.cls-21 {
  fill: #1f1f21;
}

.cls-22 {
  fill: #7083fa;
}

.cls-23, .cls-24 {
  fill: #4f5057;
}

.cls-3 {
  opacity: .6;
}

.cls-3, .cls-6 {
  mix-blend-mode: multiply;
  stroke: #1f1f21;
}

.cls-7 {
  filter: url(#drop-shadow-3);
}

.cls-7, .cls-8 {
  stroke: #ffb921;
  stroke-linejoin: round;
  stroke-width: 2px;
}

.cls-4 {
  stroke: #fdfdfd;
}

.cls-24 {
  filter: url(#drop-shadow-5);
}

.cls-5 {
  stroke: #e9ac27;
}

.cls-25 {
  fill: url(#Unbenannter_Verlauf_11);
}

.cls-26 {
  fill: url(#Unbenannter_Verlauf_44);
}

.cls-27 {
  isolation: isolate;
}

.cls-6 {
  opacity: .2;
}





/* =========================== */
/* ========= CUSTOM ========== */
/* =========================== */


#ClientServer {
    --server-color: theme("colors.primary.300");
    --client-color: theme("colors.palette.honey");
    --active-color: theme("colors.gray.300");
    --transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    --dot-radius: 4.5;
}

#banana {
    display: none;
}

#staticDot {
    display: none;
}

#ClientServer.server-active {
    --active-color: var(--server-color);
}
#ClientServer.client-active {
    --active-color: var(--client-color);
}


/* -------- boards -------- */

#boardServer {
    --stroke-color: theme("colors.primary.300");
}

#boardClient {
    --stroke-color: #E9AC27;
}

.board {
    fill: theme("colors.gray.500");
    stroke: theme("colors.gray.300");
    transition: var(--transition);
}

.board.active {
    fill: var(--active-color);
    stroke: var(--stroke-color);
}

/* -------- connection -------- */

#connection-line,
#connection .dot,
#connection .data {
    transition: var(--transition);
}

#connection-line,
#connection .data {
    stroke: var(--active-color);
}

#connection-line {
  animation-delay: 0.1s;
  animation-duration: 1.3s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
  stroke-dasharray: 320;
  stroke-dashoffset: 320;
}

#connection .dot {
    fill: var(--active-color);
    opacity: 0;
    animation-duration: 0.2s;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in-out;
}

.connect #connection-line {
    animation-name: establishConnection;
}

.connect #dotClient {
  animation-delay: 0;
  animation-name: fadeIn;
}

.connect #dotServer {
  animation-delay: 1.3s;
  animation-name: fadeIn;
}


/* --- data --- */
.send-to-server .data {
    animation-name: clientToServer;
}

.send-to-client .data {
    animation-name: serverToClient;
}

.data {
    stroke-width: 0.45rem;
    /* make the dot by rounding the edges of the stroke */
    stroke-linecap: round;
    stroke-linejoin: round;

    /* set the length of the dash to 0 so it only shows the rounded edges => circle
       the second parameter defines the space between, needs to be at least as long as the path itself
    */
    stroke-dasharray: 0 300;
    animation-duration: 1000ms;
    animation-iteration-count: 1;
    animation-timing-function: linear;
    animation-fill-mode: forwards;
    /* needs to be more that 0 to make initial state invisible */
    stroke-dashoffset: 10;

    filter: url(#drop-shadow-3);
}




/* =========== ANIMATION =========== */

/* parameters are set out of bounds of the line so the data-dot
   vanishes when reaching it's destination (otherwise it lingers there)
*/
@keyframes serverToClient {
  from {
      stroke-dashoffset: 10;
  }
  to {
      stroke-dashoffset: 320;
  }
}
  
@keyframes clientToServer {
  from {
      stroke-dashoffset: 320;
  }
  to {
      stroke-dashoffset: 10;
  }
}

@keyframes establishConnection {
  from {
      stroke-dashoffset: -320;
  }

  to {
      stroke-dashoffset: 0;
  }
}

@keyframes endConnection {
  from {
      stroke-dashoffset: 0;
  }

  to {
      stroke-dashoffset: -320;
  }
}

@keyframes fadeIn {
  from {
      opacity: 0;
  }
  to {
      opacity: 1;
  }
}

@keyframes fadeOut {
  from {
      opacity: 1;
  }
  to {
      opacity: 0;
  }
}


